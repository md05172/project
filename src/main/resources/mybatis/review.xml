<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="review">
	
	<insert id="add">
		INSERT INTO review (id, book_id, cust_id, comments, write_date, star, api_id)
		VALUES (SEQ_REVIEW.nextval, #{bookId}, #{custId}, #{comments}, SYSDATE, #{star}, #{apiId})
		
		<selectKey keyProperty="id"  resultType="Long" order="AFTER">
			SELECT SEQ_REVIEW.currval FROM dual
		</selectKey>
		
	</insert>
	
	<!-- 로그인시 해당 유저가 등록한 리뷰를 가져오기 -->
	<resultMap type="Customer" id="customerReview" autoMapping="true">
		<id column="id" property="id" javaType="Long"/>
		
		<collection column="cust_id" property="review" ofType="Review" javaType="ArrayList" autoMapping="true">
			<id column="review_id" property="id" javaType="Long"/>
		</collection>
	</resultMap>
	
	<select id="customer_review" resultMap="customerReview">
		SELECT customer.*,
			review.id review_id,
			review.book_id,
			review.cust_id cust_id,
			review.comments,
			review.write_date,
			review.star
		FROM customer
		LEFT JOIN review
		ON customer.id = review.cust_id
		WHERE customer.id = #{id}
	</select>
	
	<resultMap type="Review" id="ReviewMap" autoMapping="true">
		<id column="id" property="id" javaType="Long"/>
		
		<association property="customer" javaType="Customer" autoMapping="true">
			<id column="cust_id" property="id" javaType="Long"/>
		</association>
	</resultMap>
	
	<!-- 해당도서에 등록된 리뷰를 가져온다 유저와 같이. -->
	<select id="list" resultMap="ReviewMap">
		SELECT review.*, 
			customer.id cust_id,
			customer.email,
			customer.name,
			customer.phone,
			customer.role
		FROM review
		JOIN customer
		ON review.cust_id = customer.id
		WHERE book_id = #{bookId}
		<if test="select == 1">
			ORDER BY write_date ASC
		</if>
		
		<if test="select == 2">
			ORDER BY star ASC
		</if>
	</select>
	
	<select id="item" resultMap="ReviewMap">
		SELECT review.*, 
			customer.id cust_id,
			customer.email,
			customer.name,
			customer.phone,
			customer.role
		FROM review
		JOIN customer
		ON review.cust_id = customer.id
		WHERE review.id = #{id}
	</select>
	
	<select id="avg" resultType="Double">
		SELECT AVG(star) FROM review
		WHERE book_id = #{id}
	</select>
	
	<select id="count" resultType="Integer">
		SELECT COUNT(*) FROM review
		WHERE book_id = #{id}
	</select>
	
	<!-- api로그인시 해당 유저가 등록한 리뷰를 가져오기 -->
	<resultMap type="Api" id="ApiReview" autoMapping="true">
		<id column="id" property="id" javaType="Long"/>
		
		<collection column="cust_id" property="review" ofType="Review" javaType="ArrayList" autoMapping="true">
			<id column="review_id" property="id" javaType="Long"/>
		</collection>
	</resultMap>
	
	<select id="api_review" resultMap="ApiReview">
		SELECT api.*,
			review.id review_id,
			review.book_id,
			review.cust_id cust_id,
			review.comments,
			review.write_date,
			review.star
		FROM api
		LEFT JOIN review
		ON api.id = review.api_id
		WHERE api.id = #{id}
	</select>
	
	<!-- 도서에 해당하는 리뷰룰 가져온다 api고객과 같이 -->
	<resultMap type="Review" id="ApiReviewMap" autoMapping="true">
		<id column="id" property="id" javaType="Long"/>
		
		<association property="api" javaType="Api" autoMapping="true">
			<id column="api_id" property="id" javaType="Long"/>
		</association>
	</resultMap>
	
	<!-- 해당도서에 등록된 리뷰를 가져온다 유저와 같이. -->
	<select id="api_list" resultMap="ApiReviewMap">
		SELECT review.*, 
			api.id api_id,
			api.email,
			api.name,
			api.phone,
			api.role
		FROM review
		JOIN api
		ON review.api_id = api.id
		WHERE book_id = #{bookId}
		<if test="select == 1">
			ORDER BY write_date ASC
		</if>
		
		<if test="select == 2">
			ORDER BY star ASC
		</if>
	</select>
	
	<select id="api_item" resultMap="ApiReviewMap">
		SELECT review.*, 
			api.id api_id,
			api.email,
			api.name,
			api.phone,
			api.role
		FROM review
		JOIN api
		ON review.api_id = api.id
		WHERE book_id = #{bookId}
	</select>
	
</mapper>